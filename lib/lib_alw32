
// control block for FIFO of 32bit

// processor => fpga
// If you have asserted "data_rcv_32", data will be incomming
// fpga => processor
// If you have asserted "data_snd_32", data will go out
assign full_32 = ~data_rcv_32;
assign empty_32 = ~data_snd_32;

// receive data from processor
always @(posedge clk) begin
	if (rst_32) begin
/*user defined init*/
	end
	else if (wr_en_32) begin
/*user defined rcv*/
	end
	else begin
/*user defined */
	end
end

/*user assign*/

// state unit for FIFO
always @(posedge clk) begin
	if (rst_32) begin
		data_rcv_32 <= 0;
		data_snd_32 <= 0;
		state_32 <= INIT_32;
	end
	else if (state_32 == INIT_32)
		state_32 <= READ_32;
	else if (state_32 == READ_32 && wr_en_32) begin
		data_rcv_32 <= 1;
		data_snd_32 <= 0;
		state_32 <= WRITE_32;
	end
	else if (state_32 == WRITE_32 && rd_en_32) begin
		data_rcv_32 <= 0;
		data_snd_32 <= 1;
		state_32 <= INIT_32;
	end
end