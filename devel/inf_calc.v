`timescale 1ns / 1ps


//this code was generated by cReComp
module inf_calc(

input [0:0] clk,

input [0:0] rst_8,
input [7:0] din_8,
input [0:0] wr_en_8,
input [0:0] rd_en_8,
output [7:0] dout_8,
output [0:0] full_8,
output [0:0] empty_8);

// //copy this instance to top module
//inf_calc inf_calc
//(
//.clk(bus_clk),
//     .rst_8(!user_w_write_8_open && !user_r_read_8_open),
//     .din_8(user_w_write_8_data),
//     .wr_en_8(user_w_write_8_wren),
//     .rd_en_8(user_r_read_8_rden),
//     .dout_8(user_r_read_8_data),
//     .full_8(user_w_write_8_full),
//     .empty_8(user_r_read_8_empty)
//);

//for sub_module "adder"
reg [0:0] req_adder;
wire [0:0] busy_adder;
wire [0:0] finish_adder;


//for 8bit FIFO;
reg fifo_ctl_8;

reg [3:0] data_in_0;
reg [3:0] data_in_1;
wire [7:0] data_out;


//instance for adder
adder adder
(
.clk(clk),
.rst(rst),
.req(req),
.busy(busy),
.finish(finish),
.para_0(para_0),
.para_1(para_1),
.result(result)
);

// control block for FIFO of 8bit

// processor => fpga
// If you have asserted "fifo_ctl_8" positive, data will be incomming
// fpga => processor
// If you have asserted "fifo_ctl_8" negative, data will go out
assign full_8 = fifo_ctl_8;
assign empty_8 = ~fifo_ctl_8;

// receive data from processor
always @(posedge clk) begin
	if (rst_8) begin
		fifo_ctl_8 <= 0;
/*user defined init*/
		data_in_0 <= 0;
		data_in_1 <= 0;
	end
	else if (wr_en_8 /*busy*/) begin
		fifo_ctl_8 <= 1;
/*user defined rcv*/
		data_in_0 <= din_8[3:0];
		data_in_1 <= din_8[7:4];
	end
	else if (rd_en_8 /*finish*/)begin
		fifo_ctl_8 <= 0;
/*user defined */
	end
end

/*user assign*/
assign dout_8[7:0] = data_out;

//Please set sign for your sub module
always @(posedge clk) begin
	if (rst_8) begin
		req_adder <= 0;
	end
	else if (busy_adder  == 0) begin
		req_adder <= 1;
	end
	else begin
		req_adder <= 0;
	end
end


endmodule
